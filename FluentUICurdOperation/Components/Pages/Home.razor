@page "/"
@using FluentUICurdOperation.Data.Blog
@using FluentUICurdOperation.ViewModel

@inject IBlogService blogService

@inject IDialogService DialogService

<PageTitle>Home</PageTitle>

<AddBlogComponent CreateBlogClicked="CreateBlog" Visible="@showList" />

<DataGridComponent Blogs="@blogs" Visible="@showList"
                   EditBlogClicked="EditBlog"
                   DeleteConfirmationClicked="DeleteBlog"
                   ViewBlogClicked="ViewBlog" />

<AddEditComponent Visible="@showModal" addEditBlog="@editBlog"
                  OnSave="SaveBlog" CancelBlogClicked="backToList" />

<BlogDetailsComponent IsVisibleView="@showView" BackToBlogClicked="backToList" 
    viewBlog="@editBlog" />


@code{
    private bool showList = false;
    private IQueryable<BlogViewModel> blogs;
    private bool showModal = false;
    private BlogViewModel editBlog = new BlogViewModel();
    private int deleteId;
    private bool showView = false;

    protected override void OnInitialized()
    {
        LoadBlogs();
        showList = true;
    }
    private async void LoadBlogs()
    {
        var bloglist = await blogService.GetAllAsync();
        blogs = bloglist.Select(x => new BlogViewModel() 
        { Id = x.Id, Name = x.Name, Description = x.Description,
            ImageUrl = x.Url }).
        AsQueryable();
    }

    private void CreateBlog()
    {
        ResetVisibleComponent();
        showModal = true;
        editBlog = new BlogViewModel();
    }

    private async void EditBlog(int id)
    {
        var blog = await blogService.GetByIdAsync(id);
        var blogViewModel = new BlogViewModel()
            {
                Id = blog.Id,
                Name = blog.Name,
                Description = blog.Description,
                ImageUrl = blog.Url
            };
        editBlog = blogViewModel;
        ResetVisibleComponent();
        showModal = true;
    }
    private async void DeleteBlog(int id)
    {
        deleteId = id;
        await DialogService.
        ShowConfirmationAsync(this,
            HandleConfirmationResult,
        "Are you sure you want to procced?", "Yes", "No", "Confirmation");

    }

    async Task HandleConfirmationResult(DialogResult result)
    {
        if(!result.Cancelled)
        {
            await blogService.DeleteAsync(deleteId);
            ResetVisibleComponent();
            LoadBlogs();
            showList = true;

        }
    }
    private async void ViewBlog(int id)
    {
         var blog = await blogService.GetByIdAsync(id);
         var blogViewModel = new BlogViewModel()
            {
                Id = blog.Id,
                Name = blog.Name,
                Description = blog.Description,
                ImageUrl = blog.Url,
                Author= blog.Author
            };
        editBlog = blogViewModel;
        ResetVisibleComponent();
        showView = true;
    }

    private async void SaveBlog(BlogViewModel blog)
    {
        var blogEnity = new Blog
            {
                Id = blog.Id,
                Name = blog.Name,
                Description = blog.Description,
                Url = blog.ImageUrl
            };
        if (blog.Id > 0)
        {
            await blogService.UpdateAsync(blog.Id, blogEnity);
            await DialogService.ShowInfoAsync
            (message: $"successfully update this blog : {blog.Id}",
                                          title: "Update Blog");
        }
        else
        {
            await blogService.CreateAsync(blogEnity);
            await DialogService.
            ShowInfoAsync(message: $"successfully created this blog ",
                                         title: "Add Blog");
        }
    }

    private void backToList()
    {
        ResetVisibleComponent();
        LoadBlogs();
        showList = true;
    }

    private void ResetVisibleComponent()
    {
        showModal = false;
        showList = false;
        showView = false;
        blogs = null!;
    }
    }
